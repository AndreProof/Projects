//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TPRLab_6.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TPRLab_6.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 01/06/18 00:00 139.7500000 140.7000000 139.1500000 139.6500000 2284000
        ///04/06/18 00:00 139.9000000 140.3500000 137.1000000 137.1000000 4960900
        ///05/06/18 00:00 137.1000000 139.4500000 137.1000000 139.2500000 3351900
        ///06/06/18 00:00 139.1500000 141.5000000 139.1500000 141.3000000 3750000
        ///07/06/18 00:00 141.6000000 145.8000000 141.2000000 145.0000000 7170600
        ///08/06/18 00:00 144.7500000 145.6000000 142.6500000 143.9000000 5060600
        ///09/06/18 00:00 144.0000000 144.9500000 143.8000000 144.3500000 418100
        ///11/06/18  [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string AEROFLOT {
            get {
                return ResourceManager.GetString("AEROFLOT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Индикатор легкости движения (EMV) был разработан Ричардом Армсом младшим. Для каждого торгового дня этот индикатор предлагает составную величину, являющуюся производной цены и объема за этот период.
        ///
        ///Аналитический вид
        ///
        ///Для расчета индикатора легкости движения сначала определяется величина смещения средней точки (MM): 
        ///MM = (Ht-Lt)/2 - ((Ht-1)-(Lt-1))/2
        ///где Ht – максимальная цена текущего дня,
        ///Lt – минимальная цена текущего дня,
        ///Ht-1 – максимальная цена предыдущего дня,
        ///Lt-1 – минимальная цена преды [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string EMV {
            get {
                return ResourceManager.GetString("EMV", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 01/06/18 00:00 354.0000000 356.5000000 348.0000000 352.0000000 23240
        ///04/06/18 00:00 351.5000000 361.5000000 350.5000000 359.0000000 39875
        ///05/06/18 00:00 358.0000000 368.5000000 356.5000000 364.0000000 105596
        ///06/06/18 00:00 367.5000000 369.0000000 353.5000000 354.0000000 16533
        ///07/06/18 00:00 354.0000000 382.5000000 354.0000000 382.5000000 211144
        ///08/06/18 00:00 381.5000000 383.5000000 370.0000000 373.0000000 62641
        ///09/06/18 00:00 379.0000000 379.0000000 370.0000000 374.0000000 2939
        ///11/06/18 00:00 376.00 [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string LENTA {
            get {
                return ResourceManager.GetString("LENTA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 01/06/18 00:00 4200.5000000 4258.0000000 4180.5000000 4205.5000000 749537
        ///04/06/18 00:00 4224.5000000 4304.5000000 4224.5000000 4299.0000000 747434
        ///05/06/18 00:00 4297.5000000 4313.5000000 4248.5000000 4278.0000000 1061031
        ///06/06/18 00:00 4285.0000000 4285.0000000 4212.5000000 4264.5000000 523800
        ///07/06/18 00:00 4270.0000000 4292.0000000 4250.0000000 4250.0000000 517950
        ///08/06/18 00:00 4235.0000000 4282.5000000 4159.5000000 4159.5000000 939614
        ///09/06/18 00:00 4172.5000000 4198.0000000 4168.5000000 4193.00 [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string LUKOIL {
            get {
                return ResourceManager.GetString("LUKOIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 01/06/18 00:00 474.9000000 481.0000000 473.3000000 478.0000000 147760
        ///04/06/18 00:00 480.8000000 485.3000000 476.8000000 477.4000000 78830
        ///05/06/18 00:00 476.4000000 480.5000000 474.5000000 475.5000000 243700
        ///06/06/18 00:00 475.0000000 476.4000000 470.8000000 473.0000000 97760
        ///07/06/18 00:00 474.7000000 474.7000000 470.0000000 473.3000000 101620
        ///08/06/18 00:00 470.5000000 474.5000000 460.7000000 464.0000000 307990
        ///09/06/18 00:00 465.0000000 468.1000000 460.8000000 463.4000000 32440
        ///11/06/18 00:00 465 [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string MEGAFON {
            get {
                return ResourceManager.GetString("MEGAFON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 01/06/18 00:00 282.3500000 284.8500000 282.1500000 283.1000000 939580
        ///04/06/18 00:00 283.4000000 286.8000000 283.3000000 285.9500000 830320
        ///05/06/18 00:00 286.0000000 290.4000000 285.0500000 285.9000000 1361060
        ///06/06/18 00:00 286.2500000 286.9000000 284.0000000 285.2000000 1150230
        ///07/06/18 00:00 285.6500000 287.9500000 285.0000000 286.0500000 1258180
        ///08/06/18 00:00 285.9000000 285.9500000 282.3500000 283.5500000 1424870
        ///09/06/18 00:00 284.0000000 285.5500000 284.0000000 285.0500000 295390
        ///11/06/18 00 [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string MTS {
            get {
                return ResourceManager.GetString("MTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Балансовый объем (ОВV) ? это динамический индикатор, соотносящий объем торгов и изменение цены. ОВV разработал и ввел Джозеф Гранвилл. 
        ///
        ///Аналитический вид
        ///
        ///Если Pt&gt;Pt-1, то OBVt=OBVt-1+Vt.
        ///Если Pt&lt;Pt-1, то OBVt=OBVt-1?Vt.
        ///Если Pt=Pt-1, то OBVt=OBVt-1.
        ///
        ///где Pt – текущая цена закрытия,
        ///Pt-1 – цена закрытия предыдущего дня,
        ///Vt – объем торгов.
        ///OBVt ? значение индикатора OBV в текущем периоде;
        ///OBVt-1 ? значение индикатора OBV в предыдущем периоде.
        ///
        ///Назначение
        ///
        ///Опережающий динамический индикатор.  [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string OBV {
            get {
                return ResourceManager.GetString("OBV", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Тенденция цены и объема (PVT), как и балансовый объем (OBV), представляет собой нарастающую сумму значений объема торгов, рассчитываемую с учетом изменений цен закрытия. 
        ///
        ///Аналитический вид
        ///
        ///PVT рассчитывается путем умножения дневного объема на относительное изменение цены бумаги с добавлением полученной величины к текущему накопленному значению индикатора.
        ///
        ///PVTt = PVTt-1 + (Pt - Pt-1)/Pt-1 * Vt
        ///где Pt – текущая цена закрытия,
        ///Pt?1 – цена закрытия предыдущего дня,
        ///Vt – объем торгов.
        ///PVTt ? значени [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string PVT {
            get {
                return ResourceManager.GetString("PVT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Индикатор скорости изменения цены (ROC) показывает разность между текущей ценой и ценой n периодов назад. 
        ///
        ///Аналитический вид
        ///
        ///Абсолютное изменение цены будет выражено в пунктах, если ROC определять как разность между сегодняшней ценой закрытия и ценой закрытия n периодов назад: 
        ///ROC=Pt–Pt-n,
        ///
        ///где Pt ? текущая цена закрытия;
        ///Pt-n ? цена закрытия n периодов назад.
        ///
        ///Относительное изменение цены будет выражено в процентах:
        ///
        ///ROC=100*(Pt?Pt-n)/Pt-n.
        ///
        ///Назначение
        ///
        ///ROC ? динамический индикатор, кото [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string ROC {
            get {
                return ResourceManager.GetString("ROC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 01/06/18 00:00 384.2000000 386.7500000 381.6500000 382.5500000 1963730
        ///04/06/18 00:00 383.5000000 387.7500000 382.8500000 384.9000000 1332880
        ///05/06/18 00:00 383.6000000 386.3500000 371.4000000 381.9500000 22360970
        ///06/06/18 00:00 382.0000000 382.7500000 377.1000000 380.8000000 2332800
        ///07/06/18 00:00 381.7500000 384.0000000 380.0500000 380.0500000 2226880
        ///08/06/18 00:00 380.5000000 383.7500000 378.4500000 381.0000000 4780600
        ///09/06/18 00:00 381.7000000 382.9500000 381.0500000 382.1500000 229490
        ///11/06/18 [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string ROSNEFT {
            get {
                return ResourceManager.GetString("ROSNEFT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Процентный диапазон Уильямса (%R) – это динамический индикатор осцилляторного (опережающего) типа, определяющий состояния перекупленности/ перепроданности. По общему для всех индикаторов перекупленности/перепроданности правилу, действовать по их сигналам лучше всего, дождавшись поворо¬та цен в соответствующем направлении. 
        ///Данный индикатор раз¬работал Ларри Уильямс. 
        ///
        ///Модель индикатора
        ///
        ///%R = (HN - C)/(HN - LN) * (-100)
        ///
        ///где С – цена закрытия сегодня, 
        ///HN – максимальная цена за N периодов, 
        ///LN – мин [остаток строки не уместился]&quot;;.
        /// </summary>
        public static string Williams {
            get {
                return ResourceManager.GetString("Williams", resourceCulture);
            }
        }
    }
}
